
#the below compete code is internal configuration and comment the below code while using external config
#spring.application.name=com.tcs.microservice1
server.port=1006

# Database connection settings for MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/azhar
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
#spring.jpa.hibernate.ddl-auto = update
#spring.jpa.show-sql=true

# Logging settings
#logging.file.path=/path/to/log/directory
#logging.file.name=application.log
#
#spring.mvc.favicon.enabled=false

# Disable automatic registration with Eureka
#eureka.client.register-with-eureka=true
# Disable fetching registry information from Eureka
#eureka.client.fetch-registry=true
# Set the Eureka server URL (replace with your actual Eureka server URL)
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

#eureka.instance.preferIpAddress=true

#external configuration using configuration by adding dependencies config server and config client in all servces
# like customer service restaurant rating and config server dependency in configserver application 
spring.config.import=optional:configserver:http://localhost:1010
spring.cloud.config.uri=http://localhost:1010
# the above  commented code is available in git hub repository name microservices-configuration

# Enable all Actuator endpoints
management.endpoints.web.exposure.include=*

# Expose all sensitive Actuator endpoints without authentication (for development purposes)
#management.endpoints.web.exposure.include=*sensitive*
management.endpoint.health.show-details=always
#urls to check actuators
#http://localhost:1006/actuator
#http://localhost:1007/actuator
#http://localhost:1008/actuator
#these are commonly used endpoints of actuators /actuator/health, /actuator/info, /actuator/metrics
#/actuator/mappings, /actuator/beans, /actuator/env, /actuator/loggers

# Enable HAL browser (if needed)
spring.data.rest.base-path=/api
#urls to check application health using hal explorer in browser visual representation
#http://localhost:1006/api
#http://localhost:1007/api
#http://localhost:1008/api


# CircuitBreaker Configuration

# CircuitBreaker Configuration
# Register a health indicator for the ratingService CircuitBreaker
resilience4j.circuitbreaker.instances.ratingService.registerHealthIndicator=true

# CircuitBreaker Configuration for ratingService
# Set the sliding window size for the ratingService CircuitBreaker
resilience4j.circuitbreaker.instances.ratingService.sliding-window-size=10

# Set the minimum number of calls before the CircuitBreaker can calculate the failure rate
resilience4j.circuitbreaker.instances.ratingService.minimum-number-of-calls=5

# Set the duration to wait before transitioning from open to half-open state (in milliseconds)
resilience4j.circuitbreaker.instances.ratingService.wait-duration-in-open-state=3000

# Set the maximum number of calls permitted in the half-open state
resilience4j.circuitbreaker.instances.ratingService.permitted-number-of-calls-in-half-open-state=3

# Set the failure rate threshold percentage to open the CircuitBreaker
resilience4j.circuitbreaker.instances.ratingService.failure-rate-threshold=5

# Configuring Resilience4j retry for a specific service
# Set the maximum number of retry attempts for the ratingService Retry
resilience4j.retry.instances.ratingService.max-attempts=3

# Set the wait duration between retry attempts for the ratingService Retry (in milliseconds)
resilience4j.retry.instances.ratingService.waitDuration=500

# Enable half-open state for retrying after the retry wait duration
#resilience4j.retry.configs.ratingService.enableHalfOpen=true
#resilience4j.circuitbreaker.instances.ratingService.max-wait-duration-in-half-open-state=10
#or you can make it automatic
resilience4j.circuitbreaker.instances.ratingService.automatic-transition-from-open-to-half-open-enabled=true



# Enable CircuitBreaker health indicators in Spring Boot Actuator
management.health.circuitbreaker.enabled=true


#to check circuitbreakers urls
#http://192.168.43.197:1006/actuator/circuitbreakers
#http://localhost:1006/actuator/circuitbreakers


# Enable tracing
management.tracing.enabled=true

# Set the sampling probability to 1.0 (100%)
management.tracing.sampling.probability=1.0
#to start zipkin server from cmd C:\Users\kings\Downloads>java -jar zipkin-server-2.12.9-exec.jar
# Specify the Zipkin server endpoint
zipkin.tracing.endpoint=https://zipkinhostedserver:9411



