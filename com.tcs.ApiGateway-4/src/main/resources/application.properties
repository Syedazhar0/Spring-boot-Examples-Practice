# Application Configuration
# This section defines settings for our API Gateway application.

# Name of our API Gateway application
spring.application.name=com.tcs.ApiGateway-4

# Port number for our API Gateway
server.port=1009

# API Gateway Setup
# The API Gateway acts as a central entry point for our services.

# Eureka Client Setup
# Eureka helps our services find each other. It's like a directory where they can look up who's available to talk to.

# Don't Register Automatically with Eureka
eureka.client.register-with-eureka=true

# Don't Check Eureka for More Info
eureka.client.fetch-registry=true

# Tell Eureka to Use IP Addresses Instead of Hostnames
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# Tell Eureka We Prefer Using IP Addresses
eureka.instance.preferIpAddress=true

# Route Configuration for Services
# These lines tell the API Gateway where to send requests for each service.
# It's like telling a delivery person which door to knock on for each house.
# This setup helps us keep our system organized and secure.

# Route Configuration for Service 1
spring.cloud.gateway.routes[0].id=com.tcs.microservice1
spring.cloud.gateway.routes[0].uri=lb://com.tcs.microservice1
#remove customers when calling all services customer rating and restaurants
#spring.cloud.gateway.routes[0].predicates[0]=Path=/api/customers/**
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/**

# Route Configuration for Service 2
spring.cloud.gateway.routes[1].id=com.tcs.microservice2-2
spring.cloud.gateway.routes[1].uri=lb://com.tcs.microservice2-2
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/restaurants/**

# Route Configuration for Service 3
spring.cloud.gateway.routes[2].id=com.tcs.microservice3-3
spring.cloud.gateway.routes[2].uri=lb://com.tcs.microservice3-3
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/ratings/**

# remove spring started dependency it is providing error while fetching data

